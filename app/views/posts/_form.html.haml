= stylesheet_link_tag "jquery-te-Style"
= javascript_include_tag "jquery.ui.autocomplete"
= javascript_include_tag "jquery-te-1.0.5.min"
= stylesheet_link_tag "prettyPhoto"
= javascript_include_tag "jquery.prettyPhoto"

:javascript
  $(document).ready(function(){
      $("a[rel^='prettyPhoto']").prettyPhoto({social_tools: false, theme: 'light_square'});
      
  });

= form_for @post, :html => { :multipart => true } do |f|
  %p
    = f.label "Title"
    = f.text_field :title
  %p
    = f.label "Author"
    = f.text_field :author
  %p
    = f.label "Tags"
    = f.text_field :tag_list, :id => 'tags'

  %p= f.text_area :content, :id => 'editor', :spellcheck => 'true'

  %p
    = f.fields_for :images do |image_field|
      .image_field
        - if image_field.object.new_record?
          = image_field.file_field :image, :class => "image_preview"
        - else
          = link_to image_tag(image_field.object.image.url(:thumb)), image_field.object.image.url(:original), :rel => "prettyPhoto"
          = image_field.label "Delete?"
          = image_field.check_box :_destroy
    .new_image_field
    %iframe#image_preview{:name => "image_preview", :seamless => "seamless"}

    = recaptcha_tags
  %p= f.submit



- tags = ActsAsTaggableOn::Tag.all
- a = []
- tags.each {|t| a << t.name }
:javascript
  $("#editor").jqte();

  var availableTags = #{a};

  function split( val ) {
          return val.split( /,\s*/ );
  }
  function extractLast( term ) {
          return split( term ).pop();
  }
  $( "#tags" ).bind( "keydown", function( event ) {
    if ( event.keyCode === $.ui.keyCode.TAB &&
                    $( this ).data( "autocomplete" ).menu.active ) {
            event.preventDefault();
    }
  }).click(function() {
    $(this).autocomplete('search', $(this).val())
  }).autocomplete({
    minLength: 0,
    source: function( request, response ) {
            // delegate back to autocomplete, but extract the last term
            response( $.ui.autocomplete.filter(
                    availableTags, extractLast( request.term ) ) );
    },
    autoFocus: true,
    select: function( event, ui ) {
            var terms = split( this.value );
            // remove the current input
            terms.pop();
            // add the selected item
            terms.push( ui.item.value );
            // add placeholder to get the comma-and-space at the end
            terms.push( "" );
            this.value = terms.join( ", " );
            return false;
    }

  });


  $(".image_preview").change(function () {
    var form = $('form');

    form.prop("action", "#{image_preview_posts_path}");
    form.prop("target", "image_preview");

    form.submit();

    form.prop('action', "#{controller.action_name == 'new' ? posts_path : post_path}");
    form.prop("target", "_self");

  });

  $('iframe#image_preview').load(function()
  {
      $("iframe#image_preview").contents().find("a[rel^='prettyPhoto']").prettyPhoto({social_tools: false, theme: 'light_square'});
      
  });
