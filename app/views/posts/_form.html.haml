= form_for @post, :html => { :multipart => true, :id => "post_form", :class => "form-horizontal" } do |f|
  .control-group
    .control-label
      = f.label "Title"
    .controls
      = f.text_field :title
  .control-group
    .control-label
      = f.label "Author"
    .controls
      = f.text_field :author
  .control-group
    .control-label
      = f.label "Tags"
    .controls
      = f.text_field :tag_list, :id => 'tags'

  .controls
    = f.text_area :content, :id => 'editor', :spellcheck => 'true'
  .control-group
    .controls
      = f.fields_for :images do |image_field|
        #image_field
          - if image_field.object.new_record?    
            = image_field.file_field :image, :class => "image_file_field"
          - else
            = link_to image_tag(image_field.object.image.url(:thumb)), image_field.object.image.url(:original), :rel => "prettyPhoto"
            = image_field.label "Delete?"
            = image_field.check_box :_destroy
      #new_image_field
  
      %iframe#image_preview{:name => "image_preview", :seamless => "true", :scrolling => "no", :width => "100%", :style => "height: 0"}

  .controls
    = recaptcha_tags
  .controls
    = f.submit



- tags = ActsAsTaggableOn::Tag.all
- a = []
- tags.each {|t| a << t.name }
:javascript
  jQuery(function($) {
    $("#editor").jqte();

    var availableTags = #{a};

    function split( val ) {
            return val.split( /,\s*/ );
    }
    function extractLast( term ) {
            return split( term ).pop();
    }
    $( "#tags" ).bind( "keydown", function( event ) {
      if ( event.keyCode === $.ui.keyCode.TAB &&
                      $( this ).data( "autocomplete" ).menu.active ) {
              event.preventDefault();
      }
    }).click(function() {
      $(this).autocomplete('search', $(this).val())
    })
    $( "#tags" ).autocomplete({
      minLength: 0,
      source: function( request, response ) {
              // delegate back to autocomplete, but extract the last term
              response( $.ui.autocomplete.filter(
                      availableTags, extractLast( request.term ) ) );
      },
      autoFocus: true,
      select: function( event, ui ) {
              var terms = split( this.value );
              // remove the current input
              terms.pop();
              // add the selected item
              terms.push( ui.item.value );
              // add placeholder to get the comma-and-space at the end
              terms.push( "" );
              this.value = terms.join( ", " );
              return false;
      }

    });


    $(".image_file_field").change(function () {
      var form = $('form');

      form.prop("action", "#{image_preview_posts_path}");
      form.prop("target", "image_preview");

      form.submit();

      form.prop('action', "#{controller.action_name == 'new' ? posts_path : post_path}");
      form.prop("target", "_self");

    });

    $('iframe#image_preview').load(function()
    {
        
        var iframe =  $('iframe#image_preview');
        iframe.contents().find("a[rel^='prettyPhoto']").prettyPhoto({social_tools: false, theme: 'light_square'});
        iframe[0].style.height = "20%";
    });

    

  });

  
